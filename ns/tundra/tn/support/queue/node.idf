<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="encodeutf8">true</value>
  <value name="shared">cHJvdGVjdGVkIGZpbmFsIHN0YXRpYyBTdHJpbmcgRVhFQ1VURV9UQVNLX1NFUlZJQ0VfTkFNRSA9
ICJ0dW5kcmEudG4uc3VwcG9ydC5xdWV1ZS50YXNrOmV4ZWN1dGUiOwoKLy8gZGVxdWV1ZXMgZWFj
aCB0YXNrIG9uIHRoZSBnaXZlbiBUTiBxdWV1ZSwgYW5kIHByb2Nlc3NlcyB0aGUgdGFzayB1c2lu
ZyB0aGUgZ2l2ZW4gc2VydmljZSBhbmQgaW5wdXQgcGlwZWxpbmU7Ci8vIGlmIGNvbmN1cnJlbmN5
ID4gMSwgdGFza3Mgd2lsbCBiZSBwcm9jZXNzZWQgYnkgYSB0aHJlYWQgcG9vbCB3aG9zZSBzaXpl
IGlzIGVxdWFsIHRvIHRoZSBkZXNpcmVkIGNvbmN1cnJlbmN5LAovLyBvdGhlcndpc2UgdGhleSB3
aWxsIGJlIHByb2Nlc3NlZCBvbiB0aGUgY3VycmVudCB0aHJlYWQKcHVibGljIHN0YXRpYyB2b2lk
IGVhY2goU3RyaW5nIHF1ZXVlTmFtZSwgU3RyaW5nIHNlcnZpY2UsIElEYXRhIHBpcGVsaW5lLCBp
bnQgY29uY3VycmVuY3ksIGludCBsaW1pdCkgdGhyb3dzIFNlcnZpY2VFeGNlcHRpb24gewogIHRy
eSB7CiAgICBpZiAobGltaXQgPD0gMCkgbGltaXQgPSBJbnRlZ2VyLk1BWF9WQUxVRTsKCiAgICBj
b20ud20uYXBwLnRuLmRlbGl2ZXJ5LkRlbGl2ZXJ5UXVldWUgcXVldWUgPSBjb20ud20uYXBwLnRu
LmRiLlF1ZXVlT3BlcmF0aW9ucy5zZWxlY3RCeU5hbWUocXVldWVOYW1lKTsKICAgIGlmIChxdWV1
ZSA9PSBudWxsKSB0aHJvdyBuZXcgU2VydmljZUV4Y2VwdGlvbigiUXVldWUgJyIgKyBxdWV1ZU5h
bWUgKyAiJyBkb2VzIG5vdCBleGlzdCIpOwoKICAgIGNvbS53bS5sYW5nLm5zLk5TTmFtZSBleGVj
dXRlVGFza1NlcnZpY2UgPSBjb20ud20ubGFuZy5ucy5OU05hbWUuY3JlYXRlKEVYRUNVVEVfVEFT
S19TRVJWSUNFX05BTUUpOwoKICAgIGlmIChjb25jdXJyZW5jeSA8PSAxKSB7CiAgICAgIGVhY2hE
aXJlY3QocXVldWVOYW1lLCBxdWV1ZS5nZXRRdWV1ZVR5cGUoKSwgZXhlY3V0ZVRhc2tTZXJ2aWNl
LCBzZXJ2aWNlLCBwaXBlbGluZSwgbGltaXQpOwogICAgfSBlbHNlIHsKICAgICAgZWFjaENvbmN1
cnJlbnQocXVldWVOYW1lLCBxdWV1ZS5nZXRRdWV1ZVR5cGUoKSwgZXhlY3V0ZVRhc2tTZXJ2aWNl
LCBzZXJ2aWNlLCBwaXBlbGluZSwgY29uY3VycmVuY3ksIGxpbWl0KTsKICAgIH0KICB9IGNhdGNo
IChqYXZhLnNxbC5TUUxFeGNlcHRpb24gZXgpIHsKICAgIHRocm93IG5ldyBTZXJ2aWNlRXhjZXB0
aW9uKGV4LmdldENsYXNzKCkuZ2V0TmFtZSgpICsgIjogIiArIGV4LmdldE1lc3NhZ2UoKSk7CiAg
fSBjYXRjaCAoamF2YS5pby5JT0V4Y2VwdGlvbiBleCkgewogICAgdGhyb3cgbmV3IFNlcnZpY2VF
eGNlcHRpb24oZXguZ2V0Q2xhc3MoKS5nZXROYW1lKCkgKyAiOiAiICsgZXguZ2V0TWVzc2FnZSgp
KTsKICB9Cn0KCi8vIGRlcXVldWVzIGVhY2ggdGFzayBvbiB0aGUgZ2l2ZW4gVE4gcXVldWUsIGFu
ZCBwcm9jZXNzZXMgdGhlIHRhc2sgdXNpbmcgdGhlIGdpdmVuIHNlcnZpY2UgYW5kIGlucHV0IHBp
cGVsaW5lCi8vIG9uIHRoZSBjdXJyZW50IHRocmVhZApwcm90ZWN0ZWQgc3RhdGljIHZvaWQgZWFj
aERpcmVjdChTdHJpbmcgcXVldWVOYW1lLCBTdHJpbmcgcXVldWVUeXBlLCBjb20ud20ubGFuZy5u
cy5OU05hbWUgZXhlY3V0ZVRhc2tTZXJ2aWNlLCBTdHJpbmcgc2VydmljZSwgSURhdGEgcGlwZWxp
bmUsIGludCBsaW1pdCkgdGhyb3dzIFNlcnZpY2VFeGNlcHRpb24gewogIHRyeSB7CiAgICBpbnQg
dG90YWwgPSAwOwogICAgd2hpbGUodG90YWwgPCBsaW1pdCkgewogICAgICBjb20ud20uYXBwLnRu
LmRlbGl2ZXJ5Lkd1YXJhbnRlZWRKb2IgdGFzayA9IGNvbS53bS5hcHAudG4uZGIuRGVsaXZlcnlT
dG9yZS5kZXF1ZXVlT2xkZXN0Sm9iKHF1ZXVlTmFtZSk7CiAgICAgIGlmICh0YXNrID09IG51bGwp
IHsKICAgICAgICBicmVhazsgLy8gaWYgYWxsIHRocmVhZHMgaGF2ZSBmaW5pc2hlZCBhbmQgdGhl
cmUgYXJlIG5vIG1vcmUgdGFza3MsIHRoZW4gZXhpdAogICAgICB9IGVsc2UgewogICAgICAgIHRy
eSB7CiAgICAgICAgICBJRGF0YSBvdXRwdXQgPSBjb20ud20uYXBwLmIyYi5zZXJ2ZXIuU2Vydmlj
ZS5kb0ludm9rZShleGVjdXRlVGFza1NlcnZpY2UsIGNyZWF0ZVRhc2tJbnB1dFBpcGVsaW5lKHRh
c2ssIHNlcnZpY2UsIHBpcGVsaW5lLCBxdWV1ZU5hbWUsIHF1ZXVlVHlwZSkpOwogICAgICAgIH0g
Y2F0Y2ggKEV4Y2VwdGlvbiBleCkge30KICAgICAgICB0b3RhbCsrOwogICAgICB9CiAgICB9CiAg
fSBjYXRjaCAoRXhjZXB0aW9uIGV4KSB7CiAgICB0aHJvdyBuZXcgU2VydmljZUV4Y2VwdGlvbihl
eC5nZXRDbGFzcygpLmdldE5hbWUoKSArICI6ICIgKyBleC5nZXRNZXNzYWdlKCkpOwogIH0KfQoK
Ly8gZGVxdWV1ZXMgZWFjaCB0YXNrIG9uIHRoZSBnaXZlbiBUTiBxdWV1ZSwgYW5kIHByb2Nlc3Nl
cyB0aGUgdGFzayB1c2luZyB0aGUgZ2l2ZW4gc2VydmljZSBhbmQgaW5wdXQgcGlwZWxpbmU7Ci8v
IHRhc2tzIHdpbGwgYmUgcHJvY2Vzc2VkIGJ5IGEgdGhyZWFkIHBvb2wgd2hvc2Ugc2l6ZSBpcyBl
cXVhbCB0byB0aGUgZGVzaXJlZCBjb25jdXJyZW5jeQpwcm90ZWN0ZWQgc3RhdGljIHZvaWQgZWFj
aENvbmN1cnJlbnQoU3RyaW5nIHF1ZXVlTmFtZSwgU3RyaW5nIHF1ZXVlVHlwZSwgY29tLndtLmxh
bmcubnMuTlNOYW1lIGV4ZWN1dGVUYXNrU2VydmljZSwgU3RyaW5nIHNlcnZpY2UsIElEYXRhIHBp
cGVsaW5lLCBpbnQgY29uY3VycmVuY3ksIGludCBsaW1pdCkgdGhyb3dzIFNlcnZpY2VFeGNlcHRp
b24gewogIHRyeSB7CiAgICAvLyB1cHBlciBib3VuZCBvbiBudW1iZXIgb2YgdGFza3Mgc3VibWl0
dGVkIHRvIHRocmVhZCBwb29sIGF0IGFueSBvbmUgdGltZQogICAgaW50IGJhY2tsb2cgPSBjb25j
dXJyZW5jeSAqIDI7CiAgICBpbnQgdG90YWwgPSAwOwoKICAgIGNvbS53bS5hcHAuYjJiLnNlcnZl
ci5TZXNzaW9uIHNlc3Npb24gPSBjb20ud20uYXBwLmIyYi5zZXJ2ZXIuU2VydmljZS5nZXRTZXNz
aW9uKCk7CiAgICBjb20ud20uYXBwLmIyYi5zZXJ2ZXIuSW52b2tlU3RhdGUgc3RhdGUgPSBjb20u
d20uYXBwLmIyYi5zZXJ2ZXIuSW52b2tlU3RhdGUuZ2V0Q3VycmVudFN0YXRlKCk7CgogICAgamF2
YS51dGlsLmNvbmN1cnJlbnQuRXhlY3V0b3JTZXJ2aWNlIGV4ZWN1dG9yID0gamF2YS51dGlsLmNv
bmN1cnJlbnQuRXhlY3V0b3JzLm5ld0ZpeGVkVGhyZWFkUG9vbChjb25jdXJyZW5jeSwgbmV3IFNl
cnZlclRocmVhZEZhY3RvcnkocXVldWVOYW1lLCBzdGF0ZSkpOwoKICAgIGphdmEudXRpbC5RdWV1
ZTxqYXZhLnV0aWwuY29uY3VycmVudC5GdXR1cmU8SURhdGE+PiBmdXR1cmVzID0gbmV3IGphdmEu
dXRpbC5MaW5rZWRMaXN0PGphdmEudXRpbC5jb25jdXJyZW50LkZ1dHVyZTxJRGF0YT4+KCk7Cgog
ICAgd2hpbGUodG90YWwgPCBsaW1pdCkgewogICAgICBpbnQgc2l6ZSA9IGZ1dHVyZXMuc2l6ZSgp
OwoKICAgICAgaWYgKHNpemUgPCBiYWNrbG9nKSB7CiAgICAgICAgLy8gc3VibWl0IGFub3RoZXIg
cXVldWVkIHRhc2sKICAgICAgICBjb20ud20uYXBwLnRuLmRlbGl2ZXJ5Lkd1YXJhbnRlZWRKb2Ig
dGFzayA9IGNvbS53bS5hcHAudG4uZGIuRGVsaXZlcnlTdG9yZS5kZXF1ZXVlT2xkZXN0Sm9iKHF1
ZXVlTmFtZSk7CiAgICAgICAgaWYgKHRhc2sgPT0gbnVsbCkgewogICAgICAgICAgaWYgKHNpemUg
PiAwKSB7CiAgICAgICAgICAgIC8vIHdhaXQgZm9yIGZpcnN0IHRocmVhZCB0byBmaW5pc2g7IG9u
Y2UgZmluaXNoZWQgd2UnbGwgbG9vcCBhZ2FpbiBhbmQgc2VlIGlmIHRoZXJlIGFyZSBub3cgdGFz
a3Mgb24gdGhlIHF1ZXVlCiAgICAgICAgICAgIGF3YWl0T2xkZXN0KGZ1dHVyZXMpOwogICAgICAg
ICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gaWYgYWxsIHRocmVhZHMgaGF2ZSBmaW5pc2hlZCBh
bmQgdGhlcmUgYXJlIG5vIG1vcmUgdGFza3MsIHRoZW4gZXhpdAogICAgICAgICAgICBicmVhazsK
ICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgZnV0dXJlcy5hZGQoZXhlY3V0
b3Iuc3VibWl0KG5ldyBDYWxsYWJsZVNlcnZpY2UoZXhlY3V0ZVRhc2tTZXJ2aWNlLCBzZXNzaW9u
LCBjcmVhdGVUYXNrSW5wdXRQaXBlbGluZSh0YXNrLCBzZXJ2aWNlLCBwaXBlbGluZSwgcXVldWVO
YW1lLCBxdWV1ZVR5cGUpKSkpOwogICAgICAgICAgdG90YWwrKzsKICAgICAgICB9CiAgICAgIH0g
ZWxzZSB7CiAgICAgICAgLy8gd2FpdCBmb3IgZmlyc3QgdGhyZWFkIHRvIGZpbmlzaAogICAgICAg
IGF3YWl0T2xkZXN0KGZ1dHVyZXMpOwogICAgICB9CiAgICB9CiAgICBleGVjdXRvci5zaHV0ZG93
bigpOwogICAgYXdhaXRBbGwoZnV0dXJlcyk7CiAgfSBjYXRjaCAoamF2YS5pby5JT0V4Y2VwdGlv
biBleCkgewogICAgdGhyb3cgbmV3IFNlcnZpY2VFeGNlcHRpb24oZXguZ2V0Q2xhc3MoKS5nZXRO
YW1lKCkgKyAiOiAiICsgZXguZ2V0TWVzc2FnZSgpKTsKICB9IGNhdGNoIChjb20ud20uYXBwLnRu
LmRlbGl2ZXJ5LkRlbGl2ZXJ5RXhjZXB0aW9uIGV4KSB7CiAgICB0aHJvdyBuZXcgU2VydmljZUV4
Y2VwdGlvbihleC5nZXRDbGFzcygpLmdldE5hbWUoKSArICI6ICIgKyBleC5nZXRNZXNzYWdlKCkp
OwogIH0gY2F0Y2ggKGphdmEubGFuZy5JbnRlcnJ1cHRlZEV4Y2VwdGlvbiBleCkgewogICAgdGhy
b3cgbmV3IFNlcnZpY2VFeGNlcHRpb24oZXguZ2V0Q2xhc3MoKS5nZXROYW1lKCkgKyAiOiAiICsg
ZXguZ2V0TWVzc2FnZSgpKTsKICB9Cn0KCi8vIHdhaXRzIGZvciBhbGwgZnV0dXJlcyBpbiB0aGUg
Z2l2ZW4gcXVldWUgdG8gY29tcGxldGUKcHJvdGVjdGVkIHN0YXRpYyA8VD4gdm9pZCBhd2FpdEFs
bChqYXZhLnV0aWwuUXVldWU8amF2YS51dGlsLmNvbmN1cnJlbnQuRnV0dXJlPFQ+PiBmdXR1cmVz
KSB0aHJvd3MgSW50ZXJydXB0ZWRFeGNlcHRpb24gewogIHdoaWxlKGZ1dHVyZXMuc2l6ZSgpID4g
MCkgewogICAgYXdhaXRPbGRlc3QoZnV0dXJlcyk7CiAgfQp9CgovLyB3YWl0cyBmb3IgdGhlIGZp
cnN0L2hlYWQgZnV0dXJlIGluIHRoZSBnaXZlbiBxdWV1ZSB0byBjb21wbGV0ZQpwcm90ZWN0ZWQg
c3RhdGljIDxUPiB2b2lkIGF3YWl0T2xkZXN0KGphdmEudXRpbC5RdWV1ZTxqYXZhLnV0aWwuY29u
Y3VycmVudC5GdXR1cmU8VD4+IGZ1dHVyZXMpIHRocm93cyBJbnRlcnJ1cHRlZEV4Y2VwdGlvbiB7
CiAgYXdhaXQoZnV0dXJlcy5wb2xsKCkpOwp9CgovLyB3YWl0cyBmb3IgdGhlIGdpdmVuIGZ1dHVy
ZSB0byBjb21wbGV0ZQpwcm90ZWN0ZWQgc3RhdGljIDxUPiB2b2lkIGF3YWl0KGphdmEudXRpbC5j
b25jdXJyZW50LkZ1dHVyZTxUPiBmdXR1cmUpIHRocm93cyBJbnRlcnJ1cHRlZEV4Y2VwdGlvbiB7
CiAgdHJ5IHsgZnV0dXJlLmdldCgpOyB9IGNhdGNoIChqYXZhLnV0aWwuY29uY3VycmVudC5FeGVj
dXRpb25FeGNlcHRpb24gZXgpIHt9Cn0KCi8vIHJldHVybnMgYSBuZXcgcGlwZWxpbmUgZm9yIHRo
ZSBleGVjdXRlVGFza1NlcnZpY2UKcHJvdGVjdGVkIHN0YXRpYyBJRGF0YSBjcmVhdGVUYXNrSW5w
dXRQaXBlbGluZShjb20ud20uYXBwLnRuLmRlbGl2ZXJ5Lkd1YXJhbnRlZWRKb2IgdGFzaywgU3Ry
aW5nIHNlcnZpY2UsIElEYXRhIHBpcGVsaW5lLCBTdHJpbmcgcXVldWVOYW1lLCBTdHJpbmcgcXVl
dWVUeXBlKSB0aHJvd3MgamF2YS5pby5JT0V4Y2VwdGlvbiB7CiAgSURhdGEgb3V0cHV0ID0gSURh
dGFGYWN0b3J5LmNyZWF0ZSgpOwogIElEYXRhQ3Vyc29yIGN1cnNvciA9IG91dHB1dC5nZXRDdXJz
b3IoKTsKICBJRGF0YVV0aWwucHV0KGN1cnNvciwgInRhc2siLCB0YXNrKTsKICBJRGF0YVV0aWwu
cHV0KGN1cnNvciwgInRpbWVEZXF1ZXVlZCIsIFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpKTsK
ICBJRGF0YVV0aWwucHV0KGN1cnNvciwgIiRzZXJ2aWNlIiwgc2VydmljZSk7CiAgSURhdGFVdGls
LnB1dChjdXJzb3IsICIkcGlwZWxpbmUiLCBJRGF0YVV0aWwuZGVlcENsb25lKHBpcGVsaW5lKSk7
CiAgSURhdGFVdGlsLnB1dChjdXJzb3IsICJxdWV1ZSIsIHF1ZXVlTmFtZSk7CiAgSURhdGFVdGls
LnB1dChjdXJzb3IsICJxdWV1ZS50eXBlIiwgcXVldWVUeXBlKTsKICBjdXJzb3IuZGVzdHJveSgp
OwoKICByZXR1cm4gb3V0cHV0Owp9CgovLyB3cmFwcyBhIGNhbGwgdG8gYW4gSVMgc2VydmljZSB3
aXRoIGEgc3RhbmRhcmQgamF2YS51dGlsLmNvbmN1cnJlbnQuY2FsbGFibGUgaW50ZXJmYWNlLCBz
byB0aGF0IGl0IGNhbgovLyBiZSB1c2VkIGJ5IGphdmEudXRpbC5jb25jdXJyZW50IGV4ZWN1dG9y
cwpwdWJsaWMgc3RhdGljIGNsYXNzIENhbGxhYmxlU2VydmljZSBpbXBsZW1lbnRzIGphdmEudXRp
bC5jb25jdXJyZW50LkNhbGxhYmxlPElEYXRhPiB7CiAgcHJvdGVjdGVkIGNvbS53bS5sYW5nLm5z
Lk5TTmFtZSBzZXJ2aWNlOwogIHByb3RlY3RlZCBJRGF0YSBpbnB1dDsKICBwcm90ZWN0ZWQgY29t
LndtLmFwcC5iMmIuc2VydmVyLlNlc3Npb24gc2Vzc2lvbjsKCiAgcHVibGljIENhbGxhYmxlU2Vy
dmljZShTdHJpbmcgc2VydmljZSwgY29tLndtLmFwcC5iMmIuc2VydmVyLlNlc3Npb24gc2Vzc2lv
biwgSURhdGEgaW5wdXQpIHsKICAgIHRoaXMoY29tLndtLmxhbmcubnMuTlNOYW1lLmNyZWF0ZShz
ZXJ2aWNlKSwgc2Vzc2lvbiwgaW5wdXQpOwogIH0KCiAgcHVibGljIENhbGxhYmxlU2VydmljZShj
b20ud20ubGFuZy5ucy5OU05hbWUgc2VydmljZSwgY29tLndtLmFwcC5iMmIuc2VydmVyLlNlc3Np
b24gc2Vzc2lvbiwgSURhdGEgaW5wdXQpIHsKICAgIHRoaXMuc2VydmljZSA9IHNlcnZpY2U7CiAg
ICB0aGlzLmlucHV0ID0gaW5wdXQ7CiAgICB0aGlzLnNlc3Npb24gPSBzZXNzaW9uOwogIH0KCiAg
cHVibGljIElEYXRhIGNhbGwoKSB0aHJvd3MgRXhjZXB0aW9uIHsKICAgIHJldHVybiBjb20ud20u
YXBwLmIyYi5zZXJ2ZXIuU2VydmljZS5kb0ludm9rZShzZXJ2aWNlLCBzZXNzaW9uLCBpbnB1dCk7
CiAgfQp9IAoKLy8gYSB0aHJlYWQgZmFjdG9yeSB3aGljaCBjcmVhdGVzIElTIHRocmVhZHMgd2l0
aCB0aGUgZ2l2ZW4gaW52b2tlIHN0YXRlCnB1YmxpYyBzdGF0aWMgY2xhc3MgU2VydmVyVGhyZWFk
RmFjdG9yeSBpbXBsZW1lbnRzIGphdmEudXRpbC5jb25jdXJyZW50LlRocmVhZEZhY3Rvcnkgewog
IFN0cmluZyBxdWV1ZTsKICBwcm90ZWN0ZWQgY29tLndtLmFwcC5iMmIuc2VydmVyLkludm9rZVN0
YXRlIHN0YXRlOwogIHByb3RlY3RlZCBsb25nIGNvdW50ID0gMTsKCiAgcHVibGljIFNlcnZlclRo
cmVhZEZhY3RvcnkoU3RyaW5nIHF1ZXVlLCBjb20ud20uYXBwLmIyYi5zZXJ2ZXIuSW52b2tlU3Rh
dGUgc3RhdGUpIHsKICAgIHRoaXMucXVldWUgPSBxdWV1ZTsKICAgIHRoaXMuc3RhdGUgPSBzdGF0
ZTsKICB9CgogIHB1YmxpYyBUaHJlYWQgbmV3VGhyZWFkKFJ1bm5hYmxlIHIpIHsKICAgIGNvbS53
bS5hcHAuYjJiLnNlcnZlci5TZXJ2ZXJUaHJlYWQgdGhyZWFkID0gbmV3IGNvbS53bS5hcHAuYjJi
LnNlcnZlci5TZXJ2ZXJUaHJlYWQocik7CiAgICB0aHJlYWQuc2V0SW52b2tlU3RhdGUoY2xvbmVJ
bnZva2VTdGF0ZVdpdGhTdGFjaygpKTsKICAgIHRocmVhZC5zZXROYW1lKCJUdW5kcmFUTi9RdWV1
ZSAnIiArIHF1ZXVlICsgIicgVGhyZWFkIyIgKyBTdHJpbmcuZm9ybWF0KCIlMDNkIiwgY291bnQr
KykpOwogICAgcmV0dXJuIHRocmVhZDsKICB9CgogIHByb3RlY3RlZCBjb20ud20uYXBwLmIyYi5z
ZXJ2ZXIuSW52b2tlU3RhdGUgY2xvbmVJbnZva2VTdGF0ZVdpdGhTdGFjaygpIHsKICAgIGNvbS53
bS5hcHAuYjJiLnNlcnZlci5JbnZva2VTdGF0ZSBvdXRwdXRTdGF0ZSA9IChjb20ud20uYXBwLmIy
Yi5zZXJ2ZXIuSW52b2tlU3RhdGUpc3RhdGUuY2xvbmUoKTsKICAgIGphdmEudXRpbC5TdGFjayBz
dGFjayA9IChqYXZhLnV0aWwuU3RhY2spc3RhdGUuZ2V0Q2FsbFN0YWNrKCkuY2xvbmUoKTsKICAg
IHdoaWxlKCFzdGFjay5lbXB0eSgpKSB7CiAgICAgIGNvbS53bS5sYW5nLm5zLk5TU2VydmljZSBz
ZXJ2aWNlID0gKGNvbS53bS5sYW5nLm5zLk5TU2VydmljZSlzdGFjay5yZW1vdmUoMCk7CiAgICAg
IG91dHB1dFN0YXRlLnB1c2hTZXJ2aWNlKHNlcnZpY2UpOwogICAgfQogICAgcmV0dXJuIG91dHB1
dFN0YXRlOwogIH0KfQ==</value>
  <value name="extends"></value>
  <array name="implements" type="value" depth="1">
  </array>
  <array name="imports" type="value" depth="1">
  </array>
</Values>
