<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="encodeutf8">true</value>
  <value name="shared">cHJvdGVjdGVkIGZpbmFsIHN0YXRpYyBTdHJpbmcgRVhFQ1VURV9UQVNLX1NFUlZJQ0VfTkFNRSA9
ICJ0dW5kcmEudG4uc3VwcG9ydC5xdWV1ZS50YXNrOmV4ZWN1dGUiOwpwcm90ZWN0ZWQgZmluYWwg
c3RhdGljIGNvbS53bS5sYW5nLm5zLk5TTmFtZSBFWEVDVVRFX1RBU0tfU0VSVklDRSA9IGNvbS53
bS5sYW5nLm5zLk5TTmFtZS5jcmVhdGUoRVhFQ1VURV9UQVNLX1NFUlZJQ0VfTkFNRSk7CnByb3Rl
Y3RlZCBmaW5hbCBzdGF0aWMgU3RyaW5nIERFTElWRVJfQkFUQ0hfU0VSVklDRV9OQU1FID0gIndt
LnRuLnF1ZXVpbmc6ZGVsaXZlckJhdGNoIjsKcHJvdGVjdGVkIHN0YXRpYyBmaW5hbCBTdHJpbmcg
REVMSVZFUllfSk9CX1VQREFURV9TUUxfU1RBVEVNRU5UID0gImRlbGl2ZXIuam9iLnVwZGF0ZSI7
CgovLyBkZXF1ZXVlcyBlYWNoIHRhc2sgb24gdGhlIGdpdmVuIFROIHF1ZXVlLCBhbmQgcHJvY2Vz
c2VzIHRoZSB0YXNrIHVzaW5nIHRoZSBnaXZlbiBzZXJ2aWNlIGFuZCBpbnB1dCBwaXBlbGluZTsK
Ly8gaWYgY29uY3VycmVuY3kgPiAxLCB0YXNrcyB3aWxsIGJlIHByb2Nlc3NlZCBieSBhIHRocmVh
ZCBwb29sIHdob3NlIHNpemUgaXMgZXF1YWwgdG8gdGhlIGRlc2lyZWQgY29uY3VycmVuY3ksCi8v
IG90aGVyd2lzZSB0aGV5IHdpbGwgYmUgcHJvY2Vzc2VkIG9uIHRoZSBjdXJyZW50IHRocmVhZApw
dWJsaWMgc3RhdGljIHZvaWQgZWFjaChTdHJpbmcgcXVldWVOYW1lLCBTdHJpbmcgc2VydmljZSwg
SURhdGEgcGlwZWxpbmUsIGludCBjb25jdXJyZW5jeSwgaW50IGJhdGNoTGltaXQsIGludCByZXRy
eUxpbWl0LCBib29sZWFuIG9yZGVyZWQsIGJvb2xlYW4gc3VzcGVuZCkgdGhyb3dzIFNlcnZpY2VF
eGNlcHRpb24gewogIHRyeSB7CiAgICBpZiAoYmF0Y2hMaW1pdCA8PSAwKSBiYXRjaExpbWl0ID0g
SW50ZWdlci5NQVhfVkFMVUU7CgogICAgY29tLndtLmFwcC50bi5kZWxpdmVyeS5EZWxpdmVyeVF1
ZXVlIHF1ZXVlID0gY29tLndtLmFwcC50bi5kYi5RdWV1ZU9wZXJhdGlvbnMuc2VsZWN0QnlOYW1l
KHF1ZXVlTmFtZSk7CiAgICBpZiAocXVldWUgPT0gbnVsbCkgdGhyb3cgbmV3IFNlcnZpY2VFeGNl
cHRpb24oIlF1ZXVlICciICsgcXVldWVOYW1lICsgIicgZG9lcyBub3QgZXhpc3QiKTsKCiAgICBp
ZiAoY29uY3VycmVuY3kgPD0gMSB8fCBvcmRlcmVkKSB7CiAgICAgIGVhY2hEaXJlY3QocXVldWUs
IEVYRUNVVEVfVEFTS19TRVJWSUNFLCBzZXJ2aWNlLCBwaXBlbGluZSwgYmF0Y2hMaW1pdCwgcmV0
cnlMaW1pdCwgb3JkZXJlZCwgc3VzcGVuZCk7CiAgICB9IGVsc2UgewogICAgICBlYWNoQ29uY3Vy
cmVudChxdWV1ZSwgRVhFQ1VURV9UQVNLX1NFUlZJQ0UsIHNlcnZpY2UsIHBpcGVsaW5lLCBjb25j
dXJyZW5jeSwgYmF0Y2hMaW1pdCwgcmV0cnlMaW1pdCk7CiAgICB9CiAgfSBjYXRjaCAoamF2YS5z
cWwuU1FMRXhjZXB0aW9uIGV4KSB7CiAgICB0aHJvdyBuZXcgU2VydmljZUV4Y2VwdGlvbihleC5n
ZXRDbGFzcygpLmdldE5hbWUoKSArICI6ICIgKyBleC5nZXRNZXNzYWdlKCkpOwogIH0gY2F0Y2gg
KGphdmEuaW8uSU9FeGNlcHRpb24gZXgpIHsKICAgIHRocm93IG5ldyBTZXJ2aWNlRXhjZXB0aW9u
KGV4LmdldENsYXNzKCkuZ2V0TmFtZSgpICsgIjogIiArIGV4LmdldE1lc3NhZ2UoKSk7CiAgfQp9
CgovLyBkZXF1ZXVlcyBlYWNoIHRhc2sgb24gdGhlIGdpdmVuIFROIHF1ZXVlLCBhbmQgcHJvY2Vz
c2VzIHRoZSB0YXNrIHVzaW5nIHRoZSBnaXZlbiBzZXJ2aWNlIGFuZCBpbnB1dCBwaXBlbGluZQov
LyBvbiB0aGUgY3VycmVudCB0aHJlYWQKcHJvdGVjdGVkIHN0YXRpYyB2b2lkIGVhY2hEaXJlY3Qo
Y29tLndtLmFwcC50bi5kZWxpdmVyeS5EZWxpdmVyeVF1ZXVlIHF1ZXVlLCBjb20ud20ubGFuZy5u
cy5OU05hbWUgZXhlY3V0ZVRhc2tTZXJ2aWNlLCBTdHJpbmcgc2VydmljZSwgSURhdGEgcGlwZWxp
bmUsIGludCBiYXRjaExpbWl0LCBpbnQgcmV0cnlMaW1pdCwgYm9vbGVhbiBvcmRlcmVkLCBib29s
ZWFuIHN1c3BlbmQpIHRocm93cyBTZXJ2aWNlRXhjZXB0aW9uIHsKICBib29sZWFuIGludm9rZWRC
eVRyYWRpbmdOZXR3b3JrcyA9IGludm9rZWRCeVRyYWRpbmdOZXR3b3JrcygpOwogIGludCB0b3Rh
bCA9IDA7CgogIHRyeSB7CiAgICB3aGlsZSh0b3RhbCA8IGJhdGNoTGltaXQpIHsKICAgICAgaWYg
KCFpbnZva2VkQnlUcmFkaW5nTmV0d29ya3MgfHwgcXVldWUuaXNFbmFibGVkKCkgfHwgcXVldWUu
aXNEcmFpbmluZygpKSB7CiAgICAgICAgY29tLndtLmFwcC50bi5kZWxpdmVyeS5HdWFyYW50ZWVk
Sm9iIHRhc2sgPSBjb20ud20uYXBwLnRuLmRiLkRlbGl2ZXJ5U3RvcmUuZGVxdWV1ZU9sZGVzdEpv
YihxdWV1ZS5nZXRRdWV1ZU5hbWUoKSk7CiAgICAgICAgaWYgKHRhc2sgPT0gbnVsbCkgewogICAg
ICAgICAgYnJlYWs7IC8vIGlmIHRoZXJlIGFyZSBubyBtb3JlIHRhc2tzLCB0aGVuIGV4aXQKICAg
ICAgICB9IGVsc2UgewogICAgICAgICAgSURhdGEgb3V0cHV0ID0gY29tLndtLmFwcC5iMmIuc2Vy
dmVyLlNlcnZpY2UuZG9JbnZva2UoZXhlY3V0ZVRhc2tTZXJ2aWNlLCBjcmVhdGVUYXNrSW5wdXRQ
aXBlbGluZSh0YXNrLCBzZXJ2aWNlLCBwaXBlbGluZSwgcXVldWUuZ2V0UXVldWVOYW1lKCksIHF1
ZXVlLmdldFF1ZXVlVHlwZSgpKSk7CiAgICAgICAgICB0b3RhbCsrOwoKICAgICAgICAgIGlmIChy
ZXRyeSh0YXNrLCByZXRyeUxpbWl0LCBvcmRlcmVkLCBzdXNwZW5kKSAmJiBvcmRlcmVkKSB7IAog
ICAgICAgICAgICBicmVhazsgLy8gaWYgdGhlIHRhc2sgbmVlZHMgdG8gYmUgcmV0cmllZCBhbmQg
dGhlIHF1ZXVlIGlzIGJlaW5nIHByb2Nlc3NlZCBpbi1vcmRlciwgZXhpdCBzbyBhcyBub3QgdG8g
cmV0cnkgdGhlIHNhbWUgdGFzayBpbW1lZGlhdGVseQogICAgICAgICAgfQogICAgICAgIH0KICAg
ICAgICBpZiAoaW52b2tlZEJ5VHJhZGluZ05ldHdvcmtzKSBxdWV1ZSA9IGNvbS53bS5hcHAudG4u
ZGIuUXVldWVPcGVyYXRpb25zLnNlbGVjdEJ5TmFtZShxdWV1ZS5nZXRRdWV1ZU5hbWUoKSk7CiAg
ICAgIH0gZWxzZSB7CiAgICAgICAgYnJlYWs7IC8vIGlmIGludm9rZWQgYnkgVE4gYW5kIHF1ZXVl
IGlzIGRpc2FibGVkIG9yIHN1c3BlbmRlZCwgdGhlbiBleGl0CiAgICAgIH0KICAgIH0KICB9IGNh
dGNoIChFeGNlcHRpb24gZXgpIHsKICAgIGlmIChleCBpbnN0YW5jZW9mIFNlcnZpY2VFeGNlcHRp
b24pIHsKICAgICAgdGhyb3cgKFNlcnZpY2VFeGNlcHRpb24pZXg7CiAgICB9IGVsc2UgewogICAg
ICB0aHJvdyBuZXcgU2VydmljZUV4Y2VwdGlvbihleC5nZXRDbGFzcygpLmdldE5hbWUoKSArICI6
ICIgKyBleC5nZXRNZXNzYWdlKCkpOwogICAgfQogIH0KfQoKLy8gZGVxdWV1ZXMgZWFjaCB0YXNr
IG9uIHRoZSBnaXZlbiBUTiBxdWV1ZSwgYW5kIHByb2Nlc3NlcyB0aGUgdGFzayB1c2luZyB0aGUg
Z2l2ZW4gc2VydmljZSBhbmQgaW5wdXQgcGlwZWxpbmU7Ci8vIHRhc2tzIHdpbGwgYmUgcHJvY2Vz
c2VkIGJ5IGEgdGhyZWFkIHBvb2wgd2hvc2Ugc2l6ZSBpcyBlcXVhbCB0byB0aGUgZGVzaXJlZCBj
b25jdXJyZW5jeQpwcm90ZWN0ZWQgc3RhdGljIHZvaWQgZWFjaENvbmN1cnJlbnQoY29tLndtLmFw
cC50bi5kZWxpdmVyeS5EZWxpdmVyeVF1ZXVlIHF1ZXVlLCBjb20ud20ubGFuZy5ucy5OU05hbWUg
ZXhlY3V0ZVRhc2tTZXJ2aWNlLCBTdHJpbmcgc2VydmljZSwgSURhdGEgcGlwZWxpbmUsIGludCBj
b25jdXJyZW5jeSwgaW50IGJhdGNoTGltaXQsIGludCByZXRyeUxpbWl0KSB0aHJvd3MgU2Vydmlj
ZUV4Y2VwdGlvbiB7CiAgYm9vbGVhbiBpbnZva2VkQnlUcmFkaW5nTmV0d29ya3MgPSBpbnZva2Vk
QnlUcmFkaW5nTmV0d29ya3MoKTsKCiAgLy8gdXBwZXIgYm91bmQgb24gbnVtYmVyIG9mIHRhc2tz
IHN1Ym1pdHRlZCB0byB0aHJlYWQgcG9vbCBhdCBhbnkgb25lIHRpbWUKICBpbnQgYmFja2xvZyA9
IGNvbmN1cnJlbmN5ICogMjsKICBpbnQgdG90YWwgPSAwOwoKICBjb20ud20uYXBwLmIyYi5zZXJ2
ZXIuU2Vzc2lvbiBzZXNzaW9uID0gY29tLndtLmFwcC5iMmIuc2VydmVyLlNlcnZpY2UuZ2V0U2Vz
c2lvbigpOwogIGNvbS53bS5hcHAuYjJiLnNlcnZlci5JbnZva2VTdGF0ZSBzdGF0ZSA9IGNvbS53
bS5hcHAuYjJiLnNlcnZlci5JbnZva2VTdGF0ZS5nZXRDdXJyZW50U3RhdGUoKTsKICBqYXZhLnV0
aWwuY29uY3VycmVudC5FeGVjdXRvclNlcnZpY2UgZXhlY3V0b3IgPSBqYXZhLnV0aWwuY29uY3Vy
cmVudC5FeGVjdXRvcnMubmV3Rml4ZWRUaHJlYWRQb29sKGNvbmN1cnJlbmN5LCBuZXcgU2VydmVy
VGhyZWFkRmFjdG9yeShxdWV1ZS5nZXRRdWV1ZU5hbWUoKSwgc3RhdGUpKTsKICBqYXZhLnV0aWwu
UXVldWU8amF2YS51dGlsLmNvbmN1cnJlbnQuRnV0dXJlPElEYXRhPj4gZnV0dXJlcyA9IG5ldyBq
YXZhLnV0aWwuTGlua2VkTGlzdDxqYXZhLnV0aWwuY29uY3VycmVudC5GdXR1cmU8SURhdGE+Pigp
OwoKICB0cnkgewogICAgd2hpbGUodG90YWwgPCBiYXRjaExpbWl0KSB7CiAgICAgIGlmICghaW52
b2tlZEJ5VHJhZGluZ05ldHdvcmtzIHx8IHF1ZXVlLmlzRW5hYmxlZCgpIHx8IHF1ZXVlLmlzRHJh
aW5pbmcoKSkgewogICAgICAgIGludCBzaXplID0gZnV0dXJlcy5zaXplKCk7CiAgICAgICAgaWYg
KHNpemUgPCBiYWNrbG9nKSB7CiAgICAgICAgICAvLyBzdWJtaXQgYW5vdGhlciBxdWV1ZWQgdGFz
awogICAgICAgICAgY29tLndtLmFwcC50bi5kZWxpdmVyeS5HdWFyYW50ZWVkSm9iIHRhc2sgPSBj
b20ud20uYXBwLnRuLmRiLkRlbGl2ZXJ5U3RvcmUuZGVxdWV1ZU9sZGVzdEpvYihxdWV1ZS5nZXRR
dWV1ZU5hbWUoKSk7CiAgICAgICAgICBpZiAodGFzayA9PSBudWxsKSB7CiAgICAgICAgICAgIGlm
IChzaXplID4gMCkgewogICAgICAgICAgICAgIC8vIHdhaXQgZm9yIGZpcnN0IHRocmVhZCB0byBm
aW5pc2g7IG9uY2UgZmluaXNoZWQgd2UnbGwgbG9vcCBhZ2FpbiBhbmQgc2VlIGlmIHRoZXJlIGFy
ZSBub3cgdGFza3Mgb24gdGhlIHF1ZXVlCiAgICAgICAgICAgICAgYXdhaXRPbGRlc3QoZnV0dXJl
cywgcmV0cnlMaW1pdCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgLy8gaWYg
YWxsIHRocmVhZHMgaGF2ZSBmaW5pc2hlZCBhbmQgdGhlcmUgYXJlIG5vIG1vcmUgdGFza3MsIHRo
ZW4gZXhpdAogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVs
c2UgewogICAgICAgICAgICBmdXR1cmVzLmFkZChleGVjdXRvci5zdWJtaXQobmV3IENhbGxhYmxl
U2VydmljZShleGVjdXRlVGFza1NlcnZpY2UsIHNlc3Npb24sIGNyZWF0ZVRhc2tJbnB1dFBpcGVs
aW5lKHRhc2ssIHNlcnZpY2UsIHBpcGVsaW5lLCBxdWV1ZS5nZXRRdWV1ZU5hbWUoKSwgcXVldWUu
Z2V0UXVldWVUeXBlKCkpKSkpOwogICAgICAgICAgICB0b3RhbCsrOwogICAgICAgICAgfQogICAg
ICAgIH0gZWxzZSB7CiAgICAgICAgICAvLyB3YWl0IGZvciBmaXJzdCB0aHJlYWQgdG8gZmluaXNo
CiAgICAgICAgICBhd2FpdE9sZGVzdChmdXR1cmVzLCByZXRyeUxpbWl0KTsKICAgICAgICB9CiAg
ICAgICAgaWYgKGludm9rZWRCeVRyYWRpbmdOZXR3b3JrcykgcXVldWUgPSBjb20ud20uYXBwLnRu
LmRiLlF1ZXVlT3BlcmF0aW9ucy5zZWxlY3RCeU5hbWUocXVldWUuZ2V0UXVldWVOYW1lKCkpOwog
ICAgICB9IGVsc2UgewogICAgICAgIGJyZWFrOyAvLyBpZiBpbnZva2VkIGJ5IFROIGFuZCBxdWV1
ZSBpcyBkaXNhYmxlZCBvciBzdXNwZW5kZWQsIHRoZW4gZXhpdAogICAgICB9CiAgICB9CiAgfSBj
YXRjaCAoamF2YS5zcWwuU1FMRXhjZXB0aW9uIGV4KSB7CiAgICB0aHJvdyBuZXcgU2VydmljZUV4
Y2VwdGlvbihleC5nZXRDbGFzcygpLmdldE5hbWUoKSArICI6ICIgKyBleC5nZXRNZXNzYWdlKCkp
OwogIH0gY2F0Y2ggKGphdmEuaW8uSU9FeGNlcHRpb24gZXgpIHsKICAgIHRocm93IG5ldyBTZXJ2
aWNlRXhjZXB0aW9uKGV4LmdldENsYXNzKCkuZ2V0TmFtZSgpICsgIjogIiArIGV4LmdldE1lc3Nh
Z2UoKSk7CiAgfSBjYXRjaCAoY29tLndtLmFwcC50bi5kZWxpdmVyeS5EZWxpdmVyeUV4Y2VwdGlv
biBleCkgewogICAgdGhyb3cgbmV3IFNlcnZpY2VFeGNlcHRpb24oZXguZ2V0Q2xhc3MoKS5nZXRO
YW1lKCkgKyAiOiAiICsgZXguZ2V0TWVzc2FnZSgpKTsKICB9IGZpbmFsbHkgewogICAgZXhlY3V0
b3Iuc2h1dGRvd24oKTsKICAgIGF3YWl0QWxsKGZ1dHVyZXMsIHJldHJ5TGltaXQpOwogIH0KfQoK
Ly8gd2FpdHMgZm9yIGFsbCBmdXR1cmVzIGluIHRoZSBnaXZlbiBxdWV1ZSB0byBjb21wbGV0ZQpw
cm90ZWN0ZWQgc3RhdGljIGphdmEudXRpbC5MaXN0PElEYXRhPiBhd2FpdEFsbChqYXZhLnV0aWwu
UXVldWU8amF2YS51dGlsLmNvbmN1cnJlbnQuRnV0dXJlPElEYXRhPj4gZnV0dXJlcywgaW50IHJl
dHJ5TGltaXQpIHsKICBqYXZhLnV0aWwuTGlzdDxJRGF0YT4gcmVzdWx0cyA9IG5ldyBqYXZhLnV0
aWwuQXJyYXlMaXN0PElEYXRhPihmdXR1cmVzLnNpemUoKSk7CiAgd2hpbGUoZnV0dXJlcy5zaXpl
KCkgPiAwKSB7CiAgICB0cnkgewogICAgICByZXN1bHRzLmFkZChhd2FpdE9sZGVzdChmdXR1cmVz
LCByZXRyeUxpbWl0KSk7CiAgICB9IGNhdGNoIChFeGNlcHRpb24gZXgpIHsKICAgICAgLy8gaWdu
b3JlIGV4Y2VwdGlvbnMKICAgIH0KICB9CiAgcmV0dXJuIHJlc3VsdHM7Cn0KCi8vIHdhaXRzIGZv
ciB0aGUgZmlyc3QvaGVhZCBmdXR1cmUgaW4gdGhlIGdpdmVuIHF1ZXVlIHRvIGNvbXBsZXRlCnBy
b3RlY3RlZCBzdGF0aWMgSURhdGEgYXdhaXRPbGRlc3QoamF2YS51dGlsLlF1ZXVlPGphdmEudXRp
bC5jb25jdXJyZW50LkZ1dHVyZTxJRGF0YT4+IGZ1dHVyZXMsIGludCByZXRyeUxpbWl0KSB0aHJv
d3MgamF2YS5zcWwuU1FMRXhjZXB0aW9uLCBqYXZhLmlvLklPRXhjZXB0aW9uLCBTZXJ2aWNlRXhj
ZXB0aW9uIHsKICByZXR1cm4gYXdhaXQoZnV0dXJlcy5wb2xsKCksIHJldHJ5TGltaXQpOwp9Cgov
LyB3YWl0cyBmb3IgdGhlIGdpdmVuIGZ1dHVyZSB0byBjb21wbGV0ZQpwcm90ZWN0ZWQgc3RhdGlj
IElEYXRhIGF3YWl0KGphdmEudXRpbC5jb25jdXJyZW50LkZ1dHVyZTxJRGF0YT4gZnV0dXJlLCBp
bnQgcmV0cnlMaW1pdCkgdGhyb3dzIGphdmEuc3FsLlNRTEV4Y2VwdGlvbiwgamF2YS5pby5JT0V4
Y2VwdGlvbiwgU2VydmljZUV4Y2VwdGlvbiB7CiAgSURhdGEgb3V0cHV0ID0gbnVsbDsKICB0cnkg
ewogICAgb3V0cHV0ID0gZnV0dXJlLmdldCgpOwoKICAgIGlmIChvdXRwdXQgIT0gbnVsbCkgewog
ICAgICBJRGF0YUN1cnNvciBjdXJzb3IgPSBvdXRwdXQuZ2V0Q3Vyc29yKCk7CiAgICAgIE9iamVj
dCB0YXNrID0gSURhdGFVdGlsLmdldChjdXJzb3IsICJ0YXNrIik7CiAgICAgIGN1cnNvci5kZXN0
cm95KCk7CgogICAgICBpZiAodGFzayAhPSBudWxsICYmIHRhc2sgaW5zdGFuY2VvZiBjb20ud20u
YXBwLnRuLmRlbGl2ZXJ5Lkd1YXJhbnRlZWRKb2IpIHJldHJ5KChjb20ud20uYXBwLnRuLmRlbGl2
ZXJ5Lkd1YXJhbnRlZWRKb2IpdGFzaywgcmV0cnlMaW1pdCk7CiAgICB9CiAgfSBjYXRjaCAoamF2
YS51dGlsLmNvbmN1cnJlbnQuRXhlY3V0aW9uRXhjZXB0aW9uIGV4KSB7CiAgICAvLyBpZ25vcmUg
ZXhjZXB0aW9ucwogIH0gY2F0Y2goSW50ZXJydXB0ZWRFeGNlcHRpb24gZXgpIHsKICAgIC8vIGln
bm9yZSBleGNlcHRpb25zCiAgfQogIHJldHVybiBvdXRwdXQ7Cn0KCi8vIHJldHVybnMgYSBuZXcg
cGlwZWxpbmUgZm9yIHRoZSBleGVjdXRlVGFza1NlcnZpY2UKcHJvdGVjdGVkIHN0YXRpYyBJRGF0
YSBjcmVhdGVUYXNrSW5wdXRQaXBlbGluZShjb20ud20uYXBwLnRuLmRlbGl2ZXJ5Lkd1YXJhbnRl
ZWRKb2IgdGFzaywgU3RyaW5nIHNlcnZpY2UsIElEYXRhIHBpcGVsaW5lLCBTdHJpbmcgcXVldWVO
YW1lLCBTdHJpbmcgcXVldWVUeXBlKSB0aHJvd3MgamF2YS5pby5JT0V4Y2VwdGlvbiB7CiAgSURh
dGEgb3V0cHV0ID0gSURhdGFGYWN0b3J5LmNyZWF0ZSgpOwogIElEYXRhQ3Vyc29yIGN1cnNvciA9
IG91dHB1dC5nZXRDdXJzb3IoKTsKICBJRGF0YVV0aWwucHV0KGN1cnNvciwgInRhc2siLCB0YXNr
KTsKICBJRGF0YVV0aWwucHV0KGN1cnNvciwgInRpbWVEZXF1ZXVlZCIsIFN5c3RlbS5jdXJyZW50
VGltZU1pbGxpcygpKTsKICBJRGF0YVV0aWwucHV0KGN1cnNvciwgIiRzZXJ2aWNlIiwgc2Vydmlj
ZSk7CiAgSURhdGFVdGlsLnB1dChjdXJzb3IsICIkcGlwZWxpbmUiLCBJRGF0YVV0aWwuZGVlcENs
b25lKHBpcGVsaW5lKSk7CiAgSURhdGFVdGlsLnB1dChjdXJzb3IsICJxdWV1ZSIsIHF1ZXVlTmFt
ZSk7CiAgSURhdGFVdGlsLnB1dChjdXJzb3IsICJxdWV1ZS50eXBlIiwgcXVldWVUeXBlKTsKICBj
dXJzb3IuZGVzdHJveSgpOwoKICByZXR1cm4gb3V0cHV0Owp9CgovLyByZXR1cm5zIHRydWUgaWYg
dGhlIGludm9jYXRpb24gY2FsbHN0YWNrIGluY2x1ZGVzIHRoZSBXbVROL3dtLnRuLnF1ZXVpbmc6
ZGVsaXZlckJhdGNoIHNlcnZpY2UKcHJvdGVjdGVkIHN0YXRpYyBib29sZWFuIGludm9rZWRCeVRy
YWRpbmdOZXR3b3JrcygpIHsKICBqYXZhLnV0aWwuSXRlcmF0b3IgaXRlcmF0b3IgPSBjb20ud20u
YXBwLmIyYi5zZXJ2ZXIuSW52b2tlU3RhdGUuZ2V0Q3VycmVudFN0YXRlKCkuZ2V0Q2FsbFN0YWNr
KCkuaXRlcmF0b3IoKTsKICBib29sZWFuIHJlc3VsdCA9IGZhbHNlOwogIHdoaWxlKGl0ZXJhdG9y
Lmhhc05leHQoKSkgewogICAgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpLnRvU3RyaW5nKCkuZXF1
YWxzKERFTElWRVJfQkFUQ0hfU0VSVklDRV9OQU1FKTsKICAgIGlmIChyZXN1bHQpIGJyZWFrOwog
IH0KICByZXR1cm4gcmVzdWx0Owp9CgovLyB3cmFwcyBhIGNhbGwgdG8gYW4gSVMgc2VydmljZSB3
aXRoIGEgc3RhbmRhcmQgamF2YS51dGlsLmNvbmN1cnJlbnQuY2FsbGFibGUgaW50ZXJmYWNlLCBz
byB0aGF0IGl0IGNhbgovLyBiZSB1c2VkIGJ5IGphdmEudXRpbC5jb25jdXJyZW50IGV4ZWN1dG9y
cwpwdWJsaWMgc3RhdGljIGNsYXNzIENhbGxhYmxlU2VydmljZSBpbXBsZW1lbnRzIGphdmEudXRp
bC5jb25jdXJyZW50LkNhbGxhYmxlPElEYXRhPiB7CiAgcHJvdGVjdGVkIGNvbS53bS5sYW5nLm5z
Lk5TTmFtZSBzZXJ2aWNlOwogIHByb3RlY3RlZCBJRGF0YSBpbnB1dDsKICBwcm90ZWN0ZWQgY29t
LndtLmFwcC5iMmIuc2VydmVyLlNlc3Npb24gc2Vzc2lvbjsKCiAgcHVibGljIENhbGxhYmxlU2Vy
dmljZShTdHJpbmcgc2VydmljZSwgY29tLndtLmFwcC5iMmIuc2VydmVyLlNlc3Npb24gc2Vzc2lv
biwgSURhdGEgaW5wdXQpIHsKICAgIHRoaXMoY29tLndtLmxhbmcubnMuTlNOYW1lLmNyZWF0ZShz
ZXJ2aWNlKSwgc2Vzc2lvbiwgaW5wdXQpOwogIH0KCiAgcHVibGljIENhbGxhYmxlU2VydmljZShj
b20ud20ubGFuZy5ucy5OU05hbWUgc2VydmljZSwgY29tLndtLmFwcC5iMmIuc2VydmVyLlNlc3Np
b24gc2Vzc2lvbiwgSURhdGEgaW5wdXQpIHsKICAgIHRoaXMuc2VydmljZSA9IHNlcnZpY2U7CiAg
ICB0aGlzLmlucHV0ID0gaW5wdXQ7CiAgICB0aGlzLnNlc3Npb24gPSBzZXNzaW9uOwogIH0KCiAg
cHVibGljIElEYXRhIGNhbGwoKSB0aHJvd3MgRXhjZXB0aW9uIHsKICAgIHJldHVybiBjb20ud20u
YXBwLmIyYi5zZXJ2ZXIuU2VydmljZS5kb0ludm9rZShzZXJ2aWNlLCBzZXNzaW9uLCBpbnB1dCk7
CiAgfQp9IAoKLy8gYSB0aHJlYWQgZmFjdG9yeSB3aGljaCBjcmVhdGVzIElTIHRocmVhZHMgd2l0
aCB0aGUgZ2l2ZW4gaW52b2tlIHN0YXRlCnB1YmxpYyBzdGF0aWMgY2xhc3MgU2VydmVyVGhyZWFk
RmFjdG9yeSBpbXBsZW1lbnRzIGphdmEudXRpbC5jb25jdXJyZW50LlRocmVhZEZhY3Rvcnkgewog
IFN0cmluZyBxdWV1ZTsKICBwcm90ZWN0ZWQgY29tLndtLmFwcC5iMmIuc2VydmVyLkludm9rZVN0
YXRlIHN0YXRlOwogIHByb3RlY3RlZCBsb25nIGNvdW50ID0gMTsKCiAgcHVibGljIFNlcnZlclRo
cmVhZEZhY3RvcnkoU3RyaW5nIHF1ZXVlLCBjb20ud20uYXBwLmIyYi5zZXJ2ZXIuSW52b2tlU3Rh
dGUgc3RhdGUpIHsKICAgIHRoaXMucXVldWUgPSBxdWV1ZTsKICAgIHRoaXMuc3RhdGUgPSBzdGF0
ZTsKICB9CgogIHB1YmxpYyBUaHJlYWQgbmV3VGhyZWFkKFJ1bm5hYmxlIHIpIHsKICAgIGNvbS53
bS5hcHAuYjJiLnNlcnZlci5TZXJ2ZXJUaHJlYWQgdGhyZWFkID0gbmV3IGNvbS53bS5hcHAuYjJi
LnNlcnZlci5TZXJ2ZXJUaHJlYWQocik7CiAgICB0aHJlYWQuc2V0SW52b2tlU3RhdGUoY2xvbmVJ
bnZva2VTdGF0ZVdpdGhTdGFjaygpKTsKICAgIHRocmVhZC5zZXROYW1lKCJUdW5kcmFUTi9RdWV1
ZSAnIiArIHF1ZXVlICsgIicgVGhyZWFkIyIgKyBTdHJpbmcuZm9ybWF0KCIlMDNkIiwgY291bnQr
KykpOwogICAgcmV0dXJuIHRocmVhZDsKICB9CgogIHByb3RlY3RlZCBjb20ud20uYXBwLmIyYi5z
ZXJ2ZXIuSW52b2tlU3RhdGUgY2xvbmVJbnZva2VTdGF0ZVdpdGhTdGFjaygpIHsKICAgIGNvbS53
bS5hcHAuYjJiLnNlcnZlci5JbnZva2VTdGF0ZSBvdXRwdXRTdGF0ZSA9IChjb20ud20uYXBwLmIy
Yi5zZXJ2ZXIuSW52b2tlU3RhdGUpc3RhdGUuY2xvbmUoKTsKICAgIGphdmEudXRpbC5TdGFjayBz
dGFjayA9IChqYXZhLnV0aWwuU3RhY2spc3RhdGUuZ2V0Q2FsbFN0YWNrKCkuY2xvbmUoKTsKICAg
IHdoaWxlKCFzdGFjay5lbXB0eSgpKSB7CiAgICAgIGNvbS53bS5sYW5nLm5zLk5TU2VydmljZSBz
ZXJ2aWNlID0gKGNvbS53bS5sYW5nLm5zLk5TU2VydmljZSlzdGFjay5yZW1vdmUoMCk7CiAgICAg
IG91dHB1dFN0YXRlLnB1c2hTZXJ2aWNlKHNlcnZpY2UpOwogICAgfQogICAgcmV0dXJuIG91dHB1
dFN0YXRlOwogIH0KfQoKLy8gcmUtZW5xdWV1ZXMgdGhlIGdpdmVuIGpvYiBmb3IgZGVsaXZlcnks
IHVubGVzcyBpdCBoYXMgcmVhY2hlZCBpdHMgcmV0cnkgbGltaXQKcHJvdGVjdGVkIHN0YXRpYyBi
b29sZWFuIHJldHJ5KGNvbS53bS5hcHAudG4uZGVsaXZlcnkuR3VhcmFudGVlZEpvYiBqb2IsIGlu
dCByZXRyeUxpbWl0KSB0aHJvd3MgamF2YS5zcWwuU1FMRXhjZXB0aW9uLCBqYXZhLmlvLklPRXhj
ZXB0aW9uLCBTZXJ2aWNlRXhjZXB0aW9uIHsKICByZXR1cm4gcmV0cnkoam9iLCByZXRyeUxpbWl0
LCBmYWxzZSwgZmFsc2UpOwp9CgovLyByZS1lbnF1ZXVlcyB0aGUgZ2l2ZW4gam9iIGZvciBkZWxp
dmVyeSwgdW5sZXNzIGl0IGhhcyByZWFjaGVkIGl0cyByZXRyeSBsaW1pdApwcm90ZWN0ZWQgc3Rh
dGljIGJvb2xlYW4gcmV0cnkoY29tLndtLmFwcC50bi5kZWxpdmVyeS5HdWFyYW50ZWVkSm9iIGpv
YiwgaW50IHJldHJ5TGltaXQsIGJvb2xlYW4gb3JkZXJlZCwgYm9vbGVhbiBzdXNwZW5kKSB0aHJv
d3MgamF2YS5zcWwuU1FMRXhjZXB0aW9uLCBqYXZhLmlvLklPRXhjZXB0aW9uLCBTZXJ2aWNlRXhj
ZXB0aW9uIHsKICBqb2IgPSBjb20ud20uYXBwLnRuLmRiLkRlbGl2ZXJ5U3RvcmUuZ2V0QW55Sm9i
KGpvYi5nZXRKb2JJZCgpLCB0cnVlKTsgLy8gcmVmZXRjaCBqb2IgZnJvbSBEQgogIGNvbS53bS5h
cHAudG4uZG9jLkJpekRvY0VudmVsb3BlIGJpemRvYyA9IGpvYi5nZXRCaXpEb2NFbnZlbG9wZSgp
OwoKICBpbnQgam9iTGltaXQgPSBqb2IuZ2V0UmV0cnlMaW1pdCgpOwogIGludCByZXRyaWVzID0g
am9iLmdldFJldHJpZXMoKTsKICBTdHJpbmcgc3RhdHVzID0gam9iLmdldFN0YXR1cygpOwogIFN0
cmluZyBxdWV1ZU5hbWUgPSBqb2IuZ2V0UXVldWVOYW1lKCk7CiAgY29tLndtLmFwcC50bi5kZWxp
dmVyeS5EZWxpdmVyeVF1ZXVlIHF1ZXVlID0gdHVuZHJhLnRuLnF1ZXVlLmdldChxdWV1ZU5hbWUp
OwoKICBib29sZWFuIGF1dG9tYXRpY1JldHJ5ID0gam9iTGltaXQgPiAwOwogIGlmIChhdXRvbWF0
aWNSZXRyeSkgcmV0cnlMaW1pdCA9IGpvYkxpbWl0OyAvLyBob25vdXIgdGhlIHJldHJ5IHNldHRp
bmdzIG9uIHRoZSB0YXNrCiAgYm9vbGVhbiBleGhhdXN0ZWQgPSByZXRyaWVzID49IHJldHJ5TGlt
aXQ7CgogIGJvb2xlYW4gZmFpbGVkID0gKGpvYkxpbWl0ID4gMCAmJiByZXRyaWVzID4gMCAmJiBz
dGF0dXMuZXF1YWxzKCJRVUVVRUQiKSkgfHwgKChqb2JMaW1pdCA8PSAwIHx8IGV4aGF1c3RlZCkg
JiYgc3RhdHVzLmVxdWFscygiRkFJTEVEIikpOwoKICBib29sZWFuIGJyZWFrTG9vcCA9IGZhbHNl
OwoKICBpZiAoZmFpbGVkKSB7CiAgICBpZiAoZXhoYXVzdGVkKSB7CiAgICAgIGlmIChvcmRlcmVk
ICYmIHN1c3BlbmQpIHsKICAgICAgICAvLyByZXNldCByZXRyaWVzIGJhY2sgdG8gMAogICAgICAg
IGpvYi5zZXRSZXRyaWVzKDApOwogICAgICAgIGpvYi5zZXRTdGF0dXMoY29tLndtLmFwcC50bi5k
ZWxpdmVyeS5HdWFyYW50ZWVkSm9iLlFVRVVFRCk7CiAgICAgICAgam9iLnNldERlZmF1bHRTZXJ2
ZXJJZCgpOwogICAgICAgIGpvYi5zZXRUaW1lVXBkYXRlZChqb2IuZ2V0VGltZUNyZWF0ZWQoKSk7
IC8vIGZvcmNlIHRoaXMgam9iIHRvIHRoZSBmcm9udCBvZiB0aGUgcXVldWUKICAgICAgICB1cGRh
dGUoam9iKTsKCiAgICAgICAgLy8gc3VzcGVuZCB0aGUgcXVldWUKICAgICAgICB0dW5kcmEudG4u
cXVldWUuc3VzcGVuZChxdWV1ZU5hbWUpOwoKICAgICAgICBpZiAoYml6ZG9jICE9IG51bGwpIHsK
ICAgICAgICAgIGNvbS53bS5hcHAudG4uZGIuQml6RG9jU3RvcmUuY2hhbmdlU3RhdHVzKGJpemRv
YywgIlFVRVVFRCIsICJTVVNQRU5ERUQiKTsKICAgICAgICAgIGlmIChxdWV1ZS5nZXRRdWV1ZVR5
cGUoKS5lcXVhbHMoInByaXZhdGUiKSkgewogICAgICAgICAgICBsb2coYml6ZG9jLCAiV0FSTklO
RyIsICJEZWxpdmVyeSIsICJTdXNwZW5kZWQgcmVjZWl2ZXIncyBwcml2YXRlIHF1ZXVlICciICsg
cXVldWVOYW1lICsgIiciLCAiT3JkZXJlZCBkZWxpdmVyeSBvZiByZWNlaXZlcidzIHByaXZhdGUg
cXVldWUgJyIgKyBxdWV1ZU5hbWUgKyAiJyB3YXMgc3VzcGVuZGVkIGR1ZSB0byB0YXNrIGV4aGF1
c3Rpb24iKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGxvZyhiaXpkb2MsICJXQVJO
SU5HIiwgIkRlbGl2ZXJ5IiwgIlN1c3BlbmRlZCBwdWJsaWMgcXVldWUgJyIgKyBxdWV1ZU5hbWUg
KyAiJyIsICJPcmRlcmVkIGRlbGl2ZXJ5IG9mIHB1YmxpYyBxdWV1ZSAnIiArIHF1ZXVlTmFtZSAr
ICInIHdhcyBzdXNwZW5kZWQgZHVlIHRvIHRhc2sgZXhoYXVzdGlvbiIpOwogICAgICAgICAgfQog
ICAgICAgIH0KCiAgICAgICAgYnJlYWtMb29wID0gdHJ1ZTsKICAgICAgfSBlbHNlIHsKICAgICAg
ICBpZiAoYml6ZG9jICE9IG51bGwpIGNvbS53bS5hcHAudG4uZGIuQml6RG9jU3RvcmUuY2hhbmdl
U3RhdHVzKGJpemRvYywgIkRPTkUgVy8gRVJST1JTIiwgIkVYSEFVU1RFRCIpOwogICAgICB9CiAg
ICB9IGVsc2UgaWYgKGF1dG9tYXRpY1JldHJ5KSB7CiAgICAgIGlmIChiaXpkb2MgIT0gbnVsbCkg
Y29tLndtLmFwcC50bi5kYi5CaXpEb2NTdG9yZS5jaGFuZ2VTdGF0dXMoYml6ZG9jLCAiUVVFVUVE
IiwgIlJFUVVFVUVEIik7CiAgICAgIGJyZWFrTG9vcCA9IHRydWU7CiAgICB9IGVsc2UgewogICAg
ICBqb2IucmV0cnlGYWlsZWQoKTsKICAgICAgam9iLnNldFN0YXR1cyhjb20ud20uYXBwLnRuLmRl
bGl2ZXJ5Lkd1YXJhbnRlZWRKb2IuUVVFVUVEKTsKICAgICAgam9iLnNldERlZmF1bHRTZXJ2ZXJJ
ZCgpOwogICAgICBpZiAob3JkZXJlZCkgam9iLnNldFRpbWVVcGRhdGVkKGpvYi5nZXRUaW1lQ3Jl
YXRlZCgpKTsgLy8gZm9yY2UgdGhpcyBqb2IgdG8gdGhlIGZyb250IG9mIHRoZSBxdWV1ZQogICAg
ICB1cGRhdGUoam9iKTsKCiAgICAgIGlmIChiaXpkb2MgIT0gbnVsbCkgY29tLndtLmFwcC50bi5k
Yi5CaXpEb2NTdG9yZS5jaGFuZ2VTdGF0dXMoYml6ZG9jLCAiUVVFVUVEIiwgIlJFUVVFVUVEIik7
CiAgICAgIGJyZWFrTG9vcCA9IHRydWU7CiAgICB9CiAgfQoKICByZXR1cm4gYnJlYWtMb29wOwp9
CgovLyBzYXZlcyB0aGUgZ2l2ZW4gam9iIHRvIHRoZSBUcmFkaW5nIE5ldHdvcmtzIGRhdGFiYXNl
CnByb3RlY3RlZCBzdGF0aWMgdm9pZCB1cGRhdGUoY29tLndtLmFwcC50bi5kZWxpdmVyeS5HdWFy
YW50ZWVkSm9iIGpvYikgdGhyb3dzIGphdmEuc3FsLlNRTEV4Y2VwdGlvbiwgamF2YS5pby5JT0V4
Y2VwdGlvbiB7CiAgamF2YS5zcWwuQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gbnVsbDsKICBqYXZh
LnNxbC5QcmVwYXJlZFN0YXRlbWVudCBzdGF0ZW1lbnQgPSBudWxsOwoKICB0cnkgewogICAgY29u
bmVjdGlvbiA9IGNvbS53bS5hcHAudG4uZGIuRGF0YXN0b3JlLmdldENvbm5lY3Rpb24oKTsKICAg
IHN0YXRlbWVudCA9IGNvbS53bS5hcHAudG4uZGIuU1FMU3RhdGVtZW50cy5wcmVwYXJlU3RhdGVt
ZW50KGNvbm5lY3Rpb24sIERFTElWRVJZX0pPQl9VUERBVEVfU1FMX1NUQVRFTUVOVCk7CiAgICBz
dGF0ZW1lbnQuY2xlYXJQYXJhbWV0ZXJzKCk7CgogICAgLy8gaW5zdGVhZCBvZiBzZXR0aW5nIFRp
bWVVcGRhdGVkIHRvIG5vdywgc2V0IGl0IHRvIHRoZSB0aW1lIGluIHRoZSBqb2Igb2JqZWN0CiAg
ICBjb20ud20uYXBwLnRuLmRiLlNRTFdyYXBwZXJzLnNldFRpbWVzdGFtcChzdGF0ZW1lbnQsIDEs
IG5ldyBqYXZhLnNxbC5UaW1lc3RhbXAoam9iLmdldFRpbWVVcGRhdGVkKCkpKTsKCiAgICBjb20u
d20uYXBwLnRuLmRiLlNRTFdyYXBwZXJzLnNldENob3BwZWRTdHJpbmcoc3RhdGVtZW50LCAyLCBq
b2IuZ2V0U3RhdHVzKCksICJEZWxpdmVyeUpvYi5Kb2JTdGF0dXMiKTsKICAgIHN0YXRlbWVudC5z
ZXRJbnQoMywgam9iLmdldFJldHJpZXMoKSk7CiAgICBjb20ud20uYXBwLnRuLmRiLlNRTFdyYXBw
ZXJzLnNldENob3BwZWRTdHJpbmcoc3RhdGVtZW50LCA0LCBqb2IuZ2V0VHJhbnNwb3J0U3RhdHVz
KCksICJEZWxpdmVyeUpvYi5UcmFuc3BvcnRTdGF0dXMiKTsKICAgIGNvbS53bS5hcHAudG4uZGIu
U1FMV3JhcHBlcnMuc2V0Q2hvcHBlZFN0cmluZyhzdGF0ZW1lbnQsIDUsIGpvYi5nZXRUcmFuc3Bv
cnRTdGF0dXNNZXNzYWdlKCksICJEZWxpdmVyeUpvYi5UcmFuc3BvcnRTdGF0dXNNZXNzYWdlIik7
CiAgICBzdGF0ZW1lbnQuc2V0SW50KDYsIChpbnQpam9iLmdldFRyYW5zcG9ydFRpbWUoKSk7CiAg
ICBjb20ud20uYXBwLnRuLmRiLlNRTFdyYXBwZXJzLnNldEJpbmFyeVN0cmVhbShzdGF0ZW1lbnQs
IDcsIGpvYi5nZXRPdXRwdXREYXRhKCkpOwogICAgY29tLndtLmFwcC50bi5kYi5TUUxXcmFwcGVy
cy5zZXRDaG9wcGVkU3RyaW5nKHN0YXRlbWVudCwgOCwgam9iLmdldFNlcnZlcklkKCksICJEZWxp
dmVyeUpvYi5TZXJ2ZXJJRCIpOwogICAgY29tLndtLmFwcC50bi5kYi5TUUxXcmFwcGVycy5zZXRC
aW5hcnlTdHJlYW0oc3RhdGVtZW50LCA5LCBqb2IuZ2V0REJJRGF0YSgpKTsKICAgIGNvbS53bS5h
cHAudG4uZGIuU1FMV3JhcHBlcnMuc2V0Q2hvcHBlZFN0cmluZyhzdGF0ZW1lbnQsIDEwLCBqb2Iu
Z2V0UXVldWVOYW1lKCksICJEZWxpdmVyeVF1ZXVlLlF1ZXVlTmFtZSIpOwogICAgY29tLndtLmFw
cC50bi5kYi5TUUxXcmFwcGVycy5zZXRDaG9wcGVkU3RyaW5nKHN0YXRlbWVudCwgMTEsIGpvYi5n
ZXRJbnZva2VBc1VzZXIoKSwgIkRlbGl2ZXJ5Sm9iLlVzZXJOYW1lIik7CiAgICBjb20ud20uYXBw
LnRuLmRiLlNRTFdyYXBwZXJzLnNldENoYXJTdHJpbmcoc3RhdGVtZW50LCAxMiwgam9iLmdldEpv
YklkKCkpOwoKICAgIHN0YXRlbWVudC5leGVjdXRlVXBkYXRlKCk7CiAgICBjb25uZWN0aW9uLmNv
bW1pdCgpOwogIH0gY2F0Y2ggKGphdmEuc3FsLlNRTEV4Y2VwdGlvbiBleCkgewogICAgY29ubmVj
dGlvbiA9IGNvbS53bS5hcHAudG4uZGIuRGF0YXN0b3JlLmhhbmRsZVNRTEV4Y2VwdGlvbihjb25u
ZWN0aW9uLCBleCk7CiAgICB0aHJvdyBleDsKICB9IGZpbmFsbHkgewogICAgY29tLndtLmFwcC50
bi5kYi5TUUxTdGF0ZW1lbnRzLnJlbGVhc2VTdGF0ZW1lbnQoc3RhdGVtZW50KTsKICAgIGNvbS53
bS5hcHAudG4uZGIuRGF0YXN0b3JlLnJlbGVhc2VDb25uZWN0aW9uKGNvbm5lY3Rpb24pOyAgICAg
CiAgfQp9Cgpwcm90ZWN0ZWQgc3RhdGljIGZpbmFsIFN0cmluZyBMT0dfU0VSVklDRV9OQU1FID0g
InR1bmRyYS50bjpsb2ciOwpwcm90ZWN0ZWQgc3RhdGljIGZpbmFsIGNvbS53bS5sYW5nLm5zLk5T
TmFtZSBMT0dfU0VSVklDRSA9IGNvbS53bS5sYW5nLm5zLk5TTmFtZS5jcmVhdGUoTE9HX1NFUlZJ
Q0VfTkFNRSk7Cgpwcm90ZWN0ZWQgc3RhdGljIHZvaWQgbG9nKGNvbS53bS5hcHAudG4uZG9jLkJp
ekRvY0VudmVsb3BlIGJpemRvYywgU3RyaW5nIHR5cGUsIFN0cmluZyBrbGFzcywgU3RyaW5nIHN1
bW1hcnksIFN0cmluZyBtZXNzYWdlKSB0aHJvd3MgU2VydmljZUV4Y2VwdGlvbiB7CiAgSURhdGEg
aW5wdXQgPSBJRGF0YUZhY3RvcnkuY3JlYXRlKCk7CiAgSURhdGFDdXJzb3IgY3Vyc29yID0gaW5w
dXQuZ2V0Q3Vyc29yKCk7CiAgSURhdGFVdGlsLnB1dChjdXJzb3IsICIkYml6ZG9jIiwgYml6ZG9j
KTsKICBJRGF0YVV0aWwucHV0KGN1cnNvciwgIiR0eXBlIiwgdHlwZSk7CiAgSURhdGFVdGlsLnB1
dChjdXJzb3IsICIkY2xhc3MiLCBrbGFzcyk7CiAgSURhdGFVdGlsLnB1dChjdXJzb3IsICIkc3Vt
bWFyeSIsIHN1bW1hcnkpOwogIElEYXRhVXRpbC5wdXQoY3Vyc29yLCAiJG1lc3NhZ2UiLCBtZXNz
YWdlKTsKICBjdXJzb3IuZGVzdHJveSgpOwoKICB0cnkgewogICAgU2VydmljZS5kb0ludm9rZShM
T0dfU0VSVklDRSwgaW5wdXQpOwogIH0gY2F0Y2ggKFNlcnZpY2VFeGNlcHRpb24gZXgpIHsKICAg
IHRocm93IGV4OwogIH0gY2F0Y2ggKEV4Y2VwdGlvbiBleCkgewogICAgdGhyb3cgbmV3IFNlcnZp
Y2VFeGNlcHRpb24oZXguZ2V0Q2xhc3MoKS5nZXROYW1lKCkgKyAiOiAiICsgZXguZ2V0TWVzc2Fn
ZSgpKTsKICB9Cn0=</value>
  <value name="extends"></value>
  <array name="implements" type="value" depth="1">
  </array>
  <array name="imports" type="value" depth="1">
  </array>
</Values>
