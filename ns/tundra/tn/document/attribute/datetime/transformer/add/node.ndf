<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="svc_type">flow</value>
  <value name="svc_subtype">default</value>
  <value name="svc_sigtype">java 3.5</value>
  <value name="svc_spec">tundra.tn.schema.document.attribute.datetime:transformer</value>
  <value name="node_comment">### tundra.tn.document.attribute.datetime.transformer:add

Trading Networks datetime attribute transformer which parses the
given Trading Networks document attribute values and adds the
given duration.

Supports a handful of well-known named patterns:

Pattern Name  | Description
------------- | --------------------------------------------
datetime      | ISO8601 XML datetime
datetime.db2  | yyyy-MM-dd-HH.mm.ss.SSSSSS
datetime.jdbc | yyyy-MM-dd HH:mm:ss.SSS
date          | ISO8601 XML date
date.jdbc     | yyyy-mm-dd
time          | ISO8601 XML time
time.jdbc     | HH:mm:ss
milliseconds  | Number of milliseconds since the Epoch, January 1, 1970 00:00:00.000 GMT (Gregorian)
seconds       | Number of seconds since the Epoch, January 1, 1970 00:00:00.000 GMT (Gregorian)

Custom datetime patterns can be specified using 
[java.text.SimpleDateFormat] compatible patterns.

This service is intended to be invoked by Trading Networks as a
custom document type attribute transformer.

#### Inputs:

* `values` is a list of datetime strings all conforming to the same
  pattern.
* `isArray` is a boolean indicating if the values argument contains
  multiple items.
* `arg` is either an [ISO8601] XML duration string to be added to the
  parsed datetime, or a [YAML] or [JSON] formatted string containing
  both the datetime pattern to use to parse the given values and an
  [ISO8601] XML duration to be added to the parsed datetime values.

  For example, the following [YAML] formatted value in `arg` will
  parse the datetime values using the pattern "dd/MM/yyyy HH:mm:ss",
  and then add a duration of 1 day:

          duration: P1D
          pattern: dd/MM/yyyy HH:mm:ss

  Similarly, the following [JSON] formatted value in `arg` will have 
  the same results:

          { "duration": "P1D", "pattern": "dd/MM/yyyy HH:mm:ss" }

#### Outputs:

* `newValues` is a list containing the same number of items as the 
  given `values` list, where `newValues[n]` is a [java.util.Date]
  object representing the parsed `values[n]` value plus the given
  duration.

[ISO8601]: &lt;http://en.wikipedia.org/wiki/ISO_8601&gt;
[java.text.SimpleDateFormat]: &lt;http://docs.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html&gt;
[java.util.Date]: &lt;http://docs.oracle.com/javase/6/docs/api/java/util/Date.html&gt;
</value>
  <value name="stateless">no</value>
  <value name="caching">no</value>
  <value name="prefetch">no</value>
  <value name="cache_ttl">15</value>
  <value name="prefetch_level">1</value>
  <value name="template_type">html</value>
  <value name="audit_level">off</value>
  <value name="check_internal_acls">no</value>
  <value name="icontext_policy">$null</value>
  <value name="system_service">no</value>
  <value name="retry_max">0</value>
  <value name="retry_interval">0</value>
  <value name="svc_in_validator_options">none</value>
  <value name="svc_out_validator_options">none</value>
  <value name="auditoption">0</value>
  <null name="auditfields_input"/>
  <null name="auditfields_output"/>
  <record name="auditsettings" javaclass="com.wm.util.Values">
    <value name="document_data">0</value>
    <value name="startExecution">false</value>
    <value name="stopExecution">false</value>
    <value name="onError">true</value>
  </record>
  <value name="pipeline_option">1</value>
  <null name="originURI"/>
  <value name="modifiable">true</value>
  <value name="is_public">false</value>
</Values>
