<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="svc_type">java</value>
  <value name="svc_subtype">unknown</value>
  <value name="svc_sigtype">java 3.5</value>
  <value name="node_comment">### tundra.tn.queue:each

Invokes the given bizdoc processing service for each item in the
given Trading Networks queue.

As the above implies, this service lets you use any normal bizdoc
processing service to process items in a Trading Networks delivery
queue.

#### Inputs:

* queue is the name of the Trading Networks queue from which tasks
  will be dequeued and processed.
* $service is the fully-qualified service name of the bizdoc
  processing service, which will be invoked for each task on the
  given queue. The service is required to implement the
  WmTN/wm.tn.rec:ProcessingService specification. Additionally,
  the queued task which is being processed will also be added to
  the input pipeline of $service as a variable named $task whose
  structure is as per WmTN/wm.tn.rec:Task, which allows $service
  to access properties on the task such as the current retry count.
* $pipeline is an optional input pipeline to be used when invoking
  the given $service bizdoc processing service. Defaults to using
  the pipeline itself as the input pipeline for $service, if not
  specified.
* $concurrency is an optional number of threads to use when
  processing queue tasks. Defaults to 1 if not specified.

  If a $concurrency &gt; 1 is specified, a thread pool will be
  created with a size equal to the given value. These threads are
  not managed by the normal Integration Server thread pools, and
  therefore are not restricted by Integration Server thread pool
  settings. As such, please ensure that the sum of all the
  $concurrency values for all Trading Networks queues that specify
  a $concurrency &gt; 1, plus the configured Integration Server
  thread pool maximum is supported by the amount of free memory
  available on your server:

      ((Q1 + .. + Qn) + IS thread pool max) * Java thread stack size &lt; Server free memory

  If a $concurrency &lt;= 1 is specified, tasks will be processed
  sequentially on the main thread.
* $ordered? is an optional boolean flag which when true processes
  tasks in ascending task creation order. Defaults to false if
  not specified.
* $suspend? is an optional boolean flag which when true will
  automatically suspend the queue when all retries of a task are
  exhausted. At this point, the exhausted task's retry count is
  reset to 0, the task is requeued to the front of the queue, and
  the queue is suspended, requiring manual intervention to resolve
  the queue processing error. Defaults to false if not specifed.
* $task.age is the optional age a task must be before it will be
  dequeued and processed, measured from its creation time. This
  argument can be used to defer the processing of tasks for the
  specified duration. If not specified, tasks are eligible to be 
  dequeued and processed immediately upon creation.
* $retry.limit is the number of times a failed task will be
  retried. Defaults to the retry limit on the receiver's profile,
  or 0 (no retries) if the receiver's profile has no retry limit
  configured.
* $retry.wait is an optional time to wait between retries,
  specified as an XML duration string. Defaults to the retry wait
  on the receiver's profile, or a zero wait between retries if the
  receiver's profile has no retry wait configured.
* $retry.factor is an optional factor to use to increase the time
  to wait between each subsequent retry. The time to wait for a
  retry is calculated as:

      ($retry.factor ^ (retry count - 1)) * $retry.wait

  Defaults to the retry factor on the receiver's profile, or 1.0
  if the receiver's profile has no retry factor configured.
* $thread.priority is an optional priority used by the threads
  processing queued tasks. Defaults to [Thread.NORM_PRIORITY],
  if not specified.
* $daemonize? is an optional boolean which when true daemonizes
  the threads used to process queued tasks, and the invocation of
  this service will continue (not exit) until either the queue is
  disabled or suspended, or the server is shutdown. Defaults to 
  false.
* $status.exhausted is an optional user status to set on the bizdoc
  if all retries of the delivery task are exhausted. Defaults to
  'EXHAUSTED'.  

#### Outputs:

* queue is the name of the Trading Networks queue from which tasks
  were dequeued and processed.
* logMsg is an optional message describing the processing of the
  queue. This output variable is not used by this service.

[Thread.NORM_PRIORITY]: &lt;http://docs.oracle.com/javase/6/docs/api/java/lang/Thread.html#NORM_PRIORITY&gt;</value>
  <value name="stateless">no</value>
  <value name="caching">no</value>
  <value name="prefetch">no</value>
  <value name="cache_ttl">15</value>
  <value name="prefetch_level">1</value>
  <value name="template_type">html</value>
  <value name="audit_level">off</value>
  <value name="check_internal_acls">no</value>
  <value name="icontext_policy">$null</value>
  <value name="system_service">no</value>
  <value name="retry_max">0</value>
  <value name="retry_interval">0</value>
  <value name="svc_in_validator_options">none</value>
  <value name="svc_out_validator_options">none</value>
  <value name="auditoption">0</value>
  <null name="auditfields_input"/>
  <null name="auditfields_output"/>
  <record name="auditsettings" javaclass="com.wm.util.Values">
    <value name="document_data">0</value>
    <value name="startExecution">false</value>
    <value name="stopExecution">false</value>
    <value name="onError">true</value>
  </record>
  <value name="pipeline_option">1</value>
  <null name="originURI"/>
  <value name="modifiable">true</value>
  <value name="is_public">false</value>
</Values>
